name: Demo.Serverless.Hotels
concurrency: demo-serverless-hotels

on:
  push:
    branches:
      - main
      - feature/**

  workflow_dispatch:

env:
  PackagePath: "./published"
  FunctionAppName: "ccfunkyhotels"
  ResourceGroupName: "rg-cc-funky-hotels-dev"
  ResourceGroupLocation: "australiasoutheast"

jobs:
  # functionappdeployment:
  #   name: 'Create function app with related resources'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Create and deploy function app'
  #       uses: Cheranga/GitHubActions/vanillafunctionapp@master
  #       with:
  #         credentials: ${{ secrets.AZURE_CREDENTIALS }}
  #         environmentName: 'dev'
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         functionAppName: 'cctestblah'
  #         location: ${{ env.ResourceGroupLocation }}
  #         category: 'nonprod'
  # storageAccountWithQueue:
  #   name: 'storage account with queue'
  #   runs-on: ubuntu-latest
  #   env:
  #     queues: 'hotel-cancellations'
  #   steps:
  #     - name: 'storage account with queue'
  #       uses: Cheranga/GitHubActions/storageaccount@master
  #       with:
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         deploymentName: 'teststorageaccountwithqueues'
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         name: 'sgccfunkyhotelsdev'
  #         location: ${{env.ResourceGroupLocation}}
  #         storageType: 'nonprod'
  #         queues: ${{ env.queues }}
  #         blobContainers: ${{ env.blobContainers }}

  # functionAppWithSettings:
  #   name: 'Update function app settings'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Update function app settings'
  #       uses: Cheranga/GitHubActions/functionappsettings@master
  #       with:
  #         deploymentName: 'testfunctionappsettings'
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         location: ${{ env.ResourceGroupLocation }}
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         functionAppName: 'ccfunkyhotelsdev'
  #         appSettings: ${{secrets.APP_SETTINGS}}
  # testkeyvaultdeployment:
  #   name: 'Create key vault with secrets'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Create key vault with secrets'
  #       uses: Cheranga/GitHubActions/keyvaultwithsecrets@master
  #       with:
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         keyVaultName: 'kvcctestblah'
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         location: ${{ env.ResourceGroupLocation }}
  #         secretData: ${{secrets.SECRET_DATA}}

  provisionresources:    
    uses: Cheranga/Demo.Serverless.Hotels/.github/workflows/provisionresources.yml@feature/steps_with_custom_actions
    with:      
      environmentName: dev
      functionAppName: ccfunkyhotels
      resourceGroupName: rg-cc-funky-hotels-dev
      location: australiasoutheast
      category: nonprod
    secrets:
      credentials: ${{ secrets.AZURE_CREDENTIALS }}
  # functionappdeployment:
  #   name: 'Create function app with related resources'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Create and deploy function app'
  #       uses: Cheranga/GitHubActions/vanillafunctionapp@master
  #       with:
  #         credentials: ${{ secrets.AZURE_CREDENTIALS }}
  #         deploymentName: '${{ github.run_number }}-${{ env.FunctionAppName }}'
  #         environmentName: 'dev'
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         functionAppName: ${{ env.FunctionAppName }}
  #         location: ${{ env.ResourceGroupLocation }}
  #         category: 'nonprod'

  # storageaccountwithqueue:
  #   name: "storage account with queue"
  #   needs: functionappdeployment
  #   runs-on: ubuntu-latest
  #   env:
  #     queues: "hotel-cancellations"
  #   steps:
  #     - name: "storage account with queue"
  #       uses: Cheranga/GitHubActions/storageaccount@master
  #       with:
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         deploymentName: "${{ github.run_number }}-storage-account-updates"
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         name: "sg${{ env.FunctionAppName }}dev"
  #         location: ${{env.ResourceGroupLocation}}
  #         storageType: "nonprod"
  #         queues: ${{ env.queues }}

  # assignrbac:
  #   name: "Assign RBAC"
  #   needs: storageaccountwithqueue
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Assign RBAC"
  #       uses: Cheranga/GitHubActions/assignrbactostorage@master
  #       with:
  #         deploymentName: "${{ github.run_number }}-assign-rbac"
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         storageAccountName: "sg${{ env.FunctionAppName }}dev"
  #         accessibility: "queue_read_write"
  #         friendlyName: ${{ env.FunctionAppName }}
  #         functionAppName: "${{ env.FunctionAppName }}dev"

  # updatefunctionappsettings:
  #   name: "Update function app settings"
  #   needs: assignrbac
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "update functionapp settings"
  #       uses: Cheranga/GitHubActions/functionappsettings@master
  #       with:
  #         deploymentName: "${{ github.run_number }}-update-functionapp-settings"
  #         resourceGroupName: ${{ env.ResourceGroupName }}
  #         location: ${{env.ResourceGroupLocation}}
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         functionAppName: "${{ env.FunctionAppName }}dev"
  #         appSettings: ${{ secrets.APP_SETTINGS }}

  # buildanddeploy:
  #   needs: updatefunctionappsettings
  #   name: "Build and Deploy"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Build and Deploy the Function App"
  #       uses: Cheranga/GitHubActions/deploydotnetfunctionapp@master
  #       with:
  #         credentials: ${{secrets.AZURE_CREDENTIALS}}
  #         dotnetVersion: "6.0.x"
  #         functionAppName: "${{ env.FunctionAppName }}dev"
