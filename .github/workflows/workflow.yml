name: Demo.Serverless.Hotels
concurrency: demo-serverless-hotels

on:
  push:
    branches:
      - main
      - feature/**

  workflow_dispatch: 

env:
  PackagePath: './published'


jobs:
  provision:
    name: 'Setup Azure Infrastructure'    
    runs-on: ubuntu-latest

    env:
      ResourceGroupName: 'rg-cc-gha-hotels-dev'
      ResourceGroupLocation: 'australiasoutheast'
      StorageAccountName: 'sgccdemohotelsdev'
      StorageSku: 'Standard_LRS'
      StorageSkuTier: 'Standard'
      FunctionAppName: 'demohotels'
      EnvironmentName: 'dev'
      AspName: 'plan-demohotels-dev'
      PlanSku: 'Y1'
      PlanTier: 'Dynamic'
      SharedResourceGroup: 'rg-cc-platform'
      SharedStorageAccount: 'sgccplatformdemo'

    steps:      
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}      
      - name: 'Provision the resource group'
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash            
            if $(az group exists --name ${{ env.ResourceGroupName }}) ; then
              echo "Azure resource group already exists, skipping creation..."
            else
              az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
              echo "Azure resource group created"
            fi 
      - name: 'Checkout repository'
        uses: actions/checkout@v2      
      - name: 'Provision Azure Resources'             
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ env.ResourceGroupName }}
          template: ./Deploy/Resources/main.bicep
          parameters: ./Deploy/Parameters/dev.json
          # parameters: > 
          #    buildNumber=${{ github.run_number }}
          #    sgName=${{ env.StorageAccountName }}
          #    storageSku=${{ env.StorageSku }}
          #    storageSkuTier=${{ env.StorageSkuTier }}
          #    functionAppName=${{ env.FunctionAppName }}
          #    environmentName=${{ env.EnvironmentName }}
          #    aspName=${{ env.AspName }}
          #    planSku=${{ env.PlanSku }}
          #    planTier=${{ env.PlanTier }}
          #    sharedResourceGroup=${{ env.SharedResourceGroup }}
          #    sharedStorageAccount=${{ env.SharedStorageAccount }}   

  buildanddeploy:
    needs: provision
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    env:
      FunctionAppName: 'fn-demohotels-dev'      
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v2

      - name: 'Setup .NET Core'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: 'Restore'
        run: dotnet restore

      - name: 'Build'
        run: dotnet build --no-restore -c Release

      - name: 'Publish'
        run: dotnet publish --configuration Release --no-build --output '${{ env.PackagePath }}/funcapp'                

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}      

      - name: 'Deploy Azure Function App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.FunctionAppName }}
          package: '${{ env.PackagePath }}/funcapp'
          slot-name: Staging

      

      # - name: 'Setup RBAC'
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |  
      #       #!/bin/bash          
      #       funcAppDeployment="${{ github.run_number }}-functionapp"
      #       storageAccountDeployment="${{ github.run_number }}-storageaccount"
      #       subscriptionScope="/subscriptions/${{ secrets.SUBSCRIPTIONID }}"

      #       storageAccountResourceId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $storageAccountDeployment --query properties.outputs.subsResourceId.value)        
      #       productionSlotPrincipalId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $funcAppDeployment --query properties.outputs.productionPrincipalId.value)
      #       stagingSlotPrincipalId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $funcAppDeployment --query properties.outputs.stagingPrincipalId.value)

      #       az role assignment create --role "Storage Blob Data Owner" --assignee $productionSlotPrincipalId --scope $subscriptionScope
      #       az role assignment create --role "Storage Blob Data Owner" --assignee $stagingSlotPrincipalId --scope $subscriptionScope
            