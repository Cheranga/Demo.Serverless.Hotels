name: Demo.Serverless.Hotels
concurrency: demo-serverless-hotels

on:
  push:
    branches:
      - main
      - feature/**

  workflow_dispatch:

jobs:
  build:
    name: 'Build Pipeline'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v2
      - name: 'Setup .NET Core'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: 'Restore'
        run: dotnet restore
      - name: 'Build and Publish'
        run: dotnet publish --no-restore --configuration Release --output ./publish_output

  deploy_resource_group:
    needs: build
    runs-on: ubuntu-latest

    env:
      ResourceGroupName: 'rg-cc-gha-hotels-dev'
      ResourceGroupLocation: 'australiasoutheast'
      StorageAccountName: 'sgccdemohotelsdev'
      StorageSku: 'Standard_LRS'
      StorageSkuTier: 'Standard'
      FunctionAppName: 'demohotels'
      EnvironmentName: 'dev'
      AspName: 'plan-demohotels-dev'
      PlanSku: 'Y1'
      PlanTier: 'Dynamic'
      SharedStorageAccount: 'sgccplatformdemo'

    steps:      
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}      
      - name: 'Provision the resource group'
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash            
            if $(az group exists --name ${{ env.ResourceGroupName }}) ; then
              echo "Azure resource group already exists, skipping creation..."
            else
              az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
              echo "Azure resource group created"
            fi 
      - name: 'Checkout repository'
        uses: actions/checkout@v2      
      - name: 'Provision Azure Resources'             
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ env.ResourceGroupName }}
          template: ./Deploy/Resources/main.bicep
          parameters: > 
             buildNumber=${{ github.run_number }}
             sgName=${{ env.StorageAccountName }}
             storageSku=${{ env.StorageSku }}
             storageSkuTier=${{ env.StorageSkuTier }}
             functionAppName=${{ env.FunctionAppName }}
             environmentName=${{ env.EnvironmentName }}
             aspName=${{ env.AspName }}
             planSku=${{ env.PlanSku }}
             planTier=${{ env.PlanTier }}
             sharedStorageAccount=${{ env.SharedStorageAccount }}      

  codedeploy:
    needs: deploy_resource_group
    name: 'Deploy Code'
    runs-on: ubuntu-latest
    env:
      FunctionAppName: 'demohotels'
    steps:
      - name: 'Deploy Azure Function App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.FunctionAppName }}
          package: './publish_output'

      

      # - name: 'Setup RBAC'
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |  
      #       #!/bin/bash          
      #       funcAppDeployment="${{ github.run_number }}-functionapp"
      #       storageAccountDeployment="${{ github.run_number }}-storageaccount"
      #       subscriptionScope="/subscriptions/${{ secrets.SUBSCRIPTIONID }}"

      #       storageAccountResourceId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $storageAccountDeployment --query properties.outputs.subsResourceId.value)        
      #       productionSlotPrincipalId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $funcAppDeployment --query properties.outputs.productionPrincipalId.value)
      #       stagingSlotPrincipalId=$(az deployment group show -g "${{ env.ResourceGroupName }}" -n $funcAppDeployment --query properties.outputs.stagingPrincipalId.value)

      #       az role assignment create --role "Storage Blob Data Owner" --assignee $productionSlotPrincipalId --scope $subscriptionScope
      #       az role assignment create --role "Storage Blob Data Owner" --assignee $stagingSlotPrincipalId --scope $subscriptionScope
            